<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.carcare.domain.user.mapper.UserMapper">

    <!-- 결과 매핑 -->
    <resultMap id="UserResultMap" type="com.carcare.domain.user.entity.User">
        <id property="id" column="id"/>
        <result property="userUuid" column="user_uuid"/>
        <result property="email" column="email"/>
        <result property="password" column="password"/>
        <result property="name" column="name"/>
        <result property="phone" column="phone"/>
        <result property="role" column="role"/>
        <result property="isActive" column="is_active"/>
        <result property="emailVerified" column="email_verified"/>
        <result property="lastLoginAt" column="last_login_at"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- SQL 조각 -->
    <sql id="userColumns">
        id, user_uuid, email, password, name, phone, role, 
        is_active, email_verified, last_login_at, created_at, updated_at
    </sql>

    <!-- 사용자 등록 -->
    <insert id="insertUser" parameterType="com.carcare.domain.user.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (user_uuid, email, password, name, phone, role, is_active, email_verified, created_at, updated_at)
        VALUES (#{userUuid}, #{email}, #{password}, #{name}, #{phone}, #{role}, #{isActive}, #{emailVerified}, #{createdAt}, #{updatedAt})
    </insert>

    <!-- 사용자 정보 수정 -->
    <update id="updateUser" parameterType="com.carcare.domain.user.entity.User">
        UPDATE users SET
            email = #{email},
            password = #{password},
            name = #{name},
            phone = #{phone},
            role = #{role},
            is_active = #{isActive},
            email_verified = #{emailVerified},
            last_login_at = #{lastLoginAt},
            updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>

    <!-- 사용자 삭제 (논리 삭제) -->
    <update id="deleteUser">
        UPDATE users 
        SET is_active = false, updated_at = CURRENT_TIMESTAMP
        WHERE id = #{id}
    </update>

    <!-- ID로 사용자 조회 -->
    <select id="findById" parameterType="long" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users
        WHERE id = #{id}
    </select>

    <!-- 이메일로 사용자 조회 -->
    <select id="findByEmail" parameterType="string" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users
        WHERE email = #{email}
    </select>

    <!-- 사용자 UUID로 사용자 조회 -->
    <select id="findByUserUuid" parameterType="string" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users
        WHERE user_uuid = #{userUuid}
    </select>

    <!-- 전화번호로 사용자 조회 -->
    <select id="findByPhone" parameterType="string" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users
        WHERE phone = #{phone}
    </select>

    <!-- 이메일 존재 여부 확인 -->
    <select id="existsByEmail" parameterType="string" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN true ELSE false END
        FROM users
        WHERE email = #{email}
    </select>

    <!-- 전화번호 존재 여부 확인 -->
    <select id="existsByPhone" parameterType="string" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN true ELSE false END
        FROM users
        WHERE phone = #{phone}
    </select>

    <!-- 활성 사용자만 조회 -->
    <select id="findActiveUsers" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users
        WHERE is_active = true
        ORDER BY created_at DESC
    </select>

    <!-- 역할별 사용자 조회 -->
    <select id="findByRole" parameterType="string" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users
        WHERE role = #{role} AND is_active = true
        ORDER BY created_at DESC
    </select>

    <!-- 페이징을 통한 사용자 목록 조회 -->
    <select id="findUsersWithPaging" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users
        WHERE is_active = true
        ORDER BY created_at DESC
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <!-- 전체 사용자 수 조회 -->
    <select id="countUsers" resultType="long">
        SELECT COUNT(*)
        FROM users
        WHERE is_active = true
    </select>

    <!-- 특정 조건의 사용자 수 조회 -->
    <select id="countUsersByCondition" resultType="long">
        SELECT COUNT(*)
        FROM users
        <where>
            <if test="isActive != null">
                AND is_active = #{isActive}
            </if>
            <if test="role != null">
                AND role = #{role}
            </if>
        </where>
    </select>

    <!-- 사용자 검색 (이름, 이메일로) -->
    <select id="searchUsers" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users
        <where>
            is_active = true
            <if test="keyword != null and keyword != ''">
                AND (
                    name ILIKE CONCAT('%', #{keyword}, '%') 
                    OR email ILIKE CONCAT('%', #{keyword}, '%')
                )
            </if>
        </where>
        ORDER BY created_at DESC
        <if test="offset != null and limit != null">
            LIMIT #{limit} OFFSET #{offset}
        </if>
    </select>

    <!-- 최근 가입한 사용자들 조회 -->
    <select id="findRecentUsers" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users
        WHERE is_active = true 
        AND created_at >= CURRENT_TIMESTAMP - INTERVAL '#{days} days'
        ORDER BY created_at DESC
        LIMIT #{limit}
    </select>

</mapper> 